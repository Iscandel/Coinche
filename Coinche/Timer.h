#pragma once
#include <SFML/System.hpp>
#include <boost/function.hpp>

///////////////////////////////////////////////////////////////////////////
// Chronomètre
///////////////////////////////////////////////////////////////////////////
class Timer
{
public:
	///////////////////////////////////////////////////////////////////////////
	// Constructeur par défaut
	///////////////////////////////////////////////////////////////////////////
	Timer();

	///////////////////////////////////////////////////////////////////////////
	// Destructeur
	///////////////////////////////////////////////////////////////////////////
	~Timer(void);

	///////////////////////////////////////////////////////////////////////////
	// Démarre le chronomètre
	///////////////////////////////////////////////////////////////////////////
	void start();

	///////////////////////////////////////////////////////////////////////////
	// Met en pause ou reprend
	///////////////////////////////////////////////////////////////////////////
	void pause(unsigned int elapsed);

	///////////////////////////////////////////////////////////////////////////
	// Indique si le chrono est arrêté
	///////////////////////////////////////////////////////////////////////////
	bool isPaused() const {return myIsPaused;}

	///////////////////////////////////////////////////////////////////////////
	// Récupère le temps écoulé depuis le lancement du chronomètre
	///////////////////////////////////////////////////////////////////////////
	unsigned int elapsedTime(unsigned int elapsed);

protected:
	//Le temps qui passe...
	sf::Clock myClock;
	//Le temps écoulé depuis le lancement du chrono pour l'utilisateur
	unsigned int myTime;
	//Indique si le chrono est temporairement arrêté
	bool myIsPaused;
};

///////////////////////////////////////////////////////////////////////////////
// Compte à rebours !
///////////////////////////////////////////////////////////////////////////////
class Countdown
{
public:
	///////////////////////////////////////////////////////////////////////////
	// Constructeur
	// duree : Durée initiale du compte à rebours, en milliseconde secondes
	///////////////////////////////////////////////////////////////////////////
	Countdown(unsigned int duree = 0);

	///////////////////////////////////////////////////////////////////////////
	// Réinitialise le compte à rebours avec 'duree' secondes
	///////////////////////////////////////////////////////////////////////////
	void reset(unsigned int duration);

	///////////////////////////////////////////////////////////////////////////
	//
	///////////////////////////////////////////////////////////////////////////
	void pause(unsigned int elapsed);

	///////////////////////////////////////////////////////////////////////////
	// Renvoie le temps restant avant la fin du compte à rebours
	///////////////////////////////////////////////////////////////////////////
	unsigned int remainingTime() {return myDuration - myTime;}

	///////////////////////////////////////////////////////////////////////////
	// Indique si le compte à rebours est terminé ou pas
	///////////////////////////////////////////////////////////////////////////
	bool isFinished() {return (myTime >= myDuration);}

protected:
	unsigned int myTime;
	//La durée du compte à rebours
	unsigned int myDuration;
	//bool monEstTermine;
	//Chrono MonChrono;
};

///////////////////////////////////////////////////////////////////////////////
//// Timer lançant une fonction une ou plusieurs fois
///////////////////////////////////////////////////////////////////////////////
class TimerFunction : public Timer
{
public:
	///////////////////////////////////////////////////////////////////////////
	// Constructeur
	///////////////////////////////////////////////////////////////////////////
	TimerFunction(boost::function0<void> function, unsigned int duration, int id = -1, unsigned int range = 0);

	///////////////////////////////////////////////////////////////////////////
	// Destructeur
	///////////////////////////////////////////////////////////////////////////
	~TimerFunction() {}

	///////////////////////////////////////////////////////////////////////////
	// Mise à jour. Vérifie si la fonction doit être appelée
	///////////////////////////////////////////////////////////////////////////
	void update(unsigned int elapsed);

	///////////////////////////////////////////////////////////////////////////
	// Indique si il n'y a plus rien à faire
	///////////////////////////////////////////////////////////////////////////
	bool isFinished() const {return myIsFinished;}

	///////////////////////////////////////////////////////////////////////////
	// Renvoie l'identificateur de la ChronoFonction
	///////////////////////////////////////////////////////////////////////////
	int getId() const {return id;}

	///////////////////////////////////////////////////////////////////////////
	// Renvoie l'identificateur de la ChronoFonction
	///////////////////////////////////////////////////////////////////////////
	void setId(int m) {id = m;}

	///////////////////////////////////////////////////////////////////////////
	// Indique que l'objet peut être détruit
	///////////////////////////////////////////////////////////////////////////
	void finish() {myIsFinished = true;}

protected:
	//Au choix : durée avant le lancement de la fonction ou durée 
	//pendant laquelle l'objet n'est pas fini (cf. intervalle)
	unsigned int myDuration;

	//Pour une utilisation en Timer (-1.f sinon)
	unsigned int myRange;

	//Coefficient de calcul lié à l'intervalle;
	int coeff;

	//La fonction à lancer
	boost::function0<void> myFunction;

	//Si l'objet doit être détruit
	bool myIsFinished;

	//L'identificateur
	int id;
};
	
