#ifndef H__GAMESTATE_150820130049_H
#define H__GAMESTATE_150820130049_H

#include "Engine.h"
#include "Message.h"

#include "View.h"

#include <boost/smart_ptr.hpp>
#include <SFML/Graphics.hpp>

typedef boost::shared_ptr<GameState> PtrGameState;

///////////////////////////////////////////////////////////////////////////////
/// \brief Base class for game state.
///////////////////////////////////////////////////////////////////////////////
class GameState : public Engine
{
public:
	///////////////////////////////////////////////////////////////////////////
	/// Constructor.
	///////////////////////////////////////////////////////////////////////////
	GameState();
	//GameState(int NomEtat) : monNomEtat(NomEtat) {}

	///////////////////////////////////////////////////////////////////////////
	/// Destructor.
	///////////////////////////////////////////////////////////////////////////
	virtual ~GameState(void);

	///////////////////////////////////////////////////////////////////////////
	/// Initializes the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void init() {};

	///////////////////////////////////////////////////////////////////////////
	/// Frees the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void free() {};

	///////////////////////////////////////////////////////////////////////////
	/// Pauses the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void pause() = 0;

	///////////////////////////////////////////////////////////////////////////
	/// Resumes the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void resume() = 0;

	///////////////////////////////////////////////////////////////////////////
	/// Updates the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void update() = 0;
	
	virtual bool catchEvent(const sf::Event& ev) = 0;

	///////////////////////////////////////////////////////////////////////////
	/// Draws the game state.
	///////////////////////////////////////////////////////////////////////////
	virtual void draw();

	///////////////////////////////////////////////////////////////////////////
	/// Indicates whether the state is paused or not.
	///
	/// \return true if the state is currently paused, false otherwise.
	///////////////////////////////////////////////////////////////////////////
	bool isPaused() const {return myIsPaused;}

	///////////////////////////////////////////////////////////////////////////
	/// Sets a new state to the (owning) game engine.
	///
	/// \param state The new state to set.
	///////////////////////////////////////////////////////////////////////////
	void setGameState(PtrGameState state);

	bool isVisible() const {return myIsVisible;}

	void setVisible(bool visible) {myIsVisible = visible;}

	//int getNomEtat() const {return monNomEtat;}
	//void setNomEtat(int etat){ monNomEtat = etat;}

	void setView(PtrView view) {myView = view;}

	//void sendMessage(const Message& m);

	void sendMessageTCP(const Message& m, int id);

	void sendMessageTCP(const Message& m, bool toLocal = true);
	
	void sendMessageTCPToAllExceptOne(const Message& m, int id);

	void clientRequestTCP(Message& m);

	bool isNotLocalId(int id);

protected:
	bool myIsPaused;
	bool myIsVisible;

	PtrView myView;
};

#endif